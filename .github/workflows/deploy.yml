name: 🚀 Deploy to AWS EC2

on:
  push:
    branches: [ main ]    # Only deploy from main branch
  workflow_dispatch:      # Allow manual deployment

jobs:
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🎨 Check code formatting
        run: npm run format:check
        
      - name: 🔍 Lint code
        run: npm run lint
        
      - name: 📝 Type check
        run: npm run type-check
        
      - name: 🏗️ Build applications
        run: npm run build
        
      - name: 🧪 Run tests (if available)
        run: npm test --if-present
        
      - name: 🔒 Security audit
        run: npm audit --audit-level=moderate
        
      - name: 🔑 Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
          
      - name: � Create deployment package
        run: |
          echo "📦 Creating deployment package..."
          
          # Create deployment directory
          mkdir -p deployment-package
          
          # Copy built applications
          cp -r apps/api/dist deployment-package/api-dist
          cp -r apps/web/.next deployment-package/web-next
          
          # Copy production node_modules for runtime
          echo "📦 Copying production dependencies..."
          
          # Create minimal API node_modules with only production deps
          cd apps/api
          npm ci --omit=dev --prefer-offline --no-audit --no-fund
          cd ../..
          cp -r apps/api/node_modules deployment-package/api-node_modules
          
          # Create minimal Web node_modules with only production deps  
          cd apps/web
          npm ci --omit=dev --prefer-offline --no-audit --no-fund
          cd ../..
          cp -r apps/web/node_modules deployment-package/web-node_modules
          
          # Copy public directory if it exists, otherwise create empty one
          if [ -d "apps/web/public" ]; then
            cp -r apps/web/public deployment-package/web-public
          else
            mkdir -p deployment-package/web-public
            echo "⚠️ No public directory found, created empty one"
          fi
          
          # Copy essential files
          cp ecosystem.config.js deployment-package/
          cp package.json deployment-package/
          cp apps/api/package.json deployment-package/api-package.json
          cp apps/web/package.json deployment-package/web-package.json
          
          # Copy lock files for faster, reliable installs
          cp package-lock.json deployment-package/ || echo "⚠️ No root package-lock.json found"
          cp apps/api/package-lock.json deployment-package/api-package-lock.json || echo "⚠️ No API package-lock.json found"
          cp apps/web/package-lock.json deployment-package/web-package-lock.json || echo "⚠️ No Web package-lock.json found"
          
          # Copy scripts
          cp scripts/health-check.sh deployment-package/
          
          # Create production package.json with only production dependencies
          node -e "
            const pkg = require('./package.json');
            const prodPkg = {
              name: pkg.name,
              version: pkg.version,
              scripts: {
                start: 'pm2 start ecosystem.config.js'
              },
              dependencies: {}
            };
            require('fs').writeFileSync('./deployment-package/package.json', JSON.stringify(prodPkg, null, 2));
          "
          
          # Create optimized deploy script for production
          cat > deployment-package/deploy-production.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting production deployment..."
          
          # Stop applications
          echo "🛑 Stopping applications..."
          pm2 stop tasktrek-api tasktrek-web || echo "⚠️ No running processes"
          
          # Create logs directory
          mkdir -p logs
          
          # Copy built files to correct locations
          echo "📁 Setting up application structure..."
          mkdir -p apps/api/dist apps/web/.next apps/web/public
          
          cp -r api-dist/* apps/api/dist/
          cp -r web-next/* apps/web/.next/
          
          # Copy pre-built node_modules
          echo "📦 Setting up dependencies..."
          cp -r api-node_modules apps/api/node_modules
          cp -r web-node_modules apps/web/node_modules
          
          # Copy public files if they exist
          if [ -d "web-public" ] && [ "$(ls -A web-public 2>/dev/null)" ]; then
            cp -r web-public/* apps/web/public/
            echo "✅ Copied public files"
          else
            echo "⚠️ No public files to copy"
          fi
          
          # Copy package.json files for reference
          cp api-package.json apps/api/package.json
          cp web-package.json apps/web/package.json
          
          # Copy lock files if they exist (for future reference)
          if [ -f "api-package-lock.json" ]; then
            cp api-package-lock.json apps/api/package-lock.json
            echo "✅ Copied API package-lock.json"
          fi
          
          if [ -f "web-package-lock.json" ]; then
            cp web-package-lock.json apps/web/package-lock.json
            echo "✅ Copied Web package-lock.json"
          fi
          
          # Start applications
          echo "🚀 Starting applications with PM2..."
          pm2 delete tasktrek-api tasktrek-web || echo "⚠️ No processes to delete"
          pm2 start ecosystem.config.js
          pm2 save
          
          echo "✅ Production deployment completed!"
          EOF
          
          chmod +x deployment-package/deploy-production.sh
          
          # List contents for debugging
          echo "📋 Deployment package contents:"
          ls -la deployment-package/
          
          # Create archive
          tar -czf deployment.tar.gz -C deployment-package .
          
          # Show archive size
          echo "📦 Deployment package size: $(du -h deployment.tar.gz | cut -f1)"
          echo "✅ Deployment package created"
      - name: 📤 Deploy to EC2
        run: |
          # Add EC2 to known hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
          # Configure SSH to prevent timeouts
          mkdir -p ~/.ssh
          cat >> ~/.ssh/config << 'EOF'
          Host deployment-server
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USER }}
            ServerAliveInterval 60
            ServerAliveCountMax 3
            TCPKeepAlive yes
            ConnectTimeout 10
          EOF
          
          # Create deployment directory
          ssh deployment-server "
            mkdir -p /home/ubuntu/TaskTrek
            mkdir -p /home/ubuntu/backup
          "
          
          # Create backup of current deployment
          ssh deployment-server "
            if [ -d '/home/ubuntu/TaskTrek' ]; then
              cp -r /home/ubuntu/TaskTrek /home/ubuntu/backup/tasktrek-backup-\$(date +%Y%m%d-%H%M%S) || echo 'Backup failed'
            fi
          "
          
          # Upload deployment package
          echo "📤 Uploading deployment package..."
          scp -o ConnectTimeout=10 -o ServerAliveInterval=60 deployment.tar.gz deployment-server:/home/ubuntu/TaskTrek/
          
          # Extract and deploy
          ssh -o ConnectTimeout=10 -o ServerAliveInterval=60 deployment-server "
            cd /home/ubuntu/TaskTrek
            
            # Extract deployment package
            echo '📦 Extracting deployment package...'
            tar -xzf deployment.tar.gz
            
            # Make deploy script executable and run it
            chmod +x deploy-production.sh
            ./deploy-production.sh
            
            # Clean up
            rm -f deployment.tar.gz
          "
          
      - name: 🔍 Health check
        run: |
          # Wait for services to start
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Run health check using the same SSH configuration
          ssh -o ConnectTimeout=10 -o ServerAliveInterval=60 deployment-server "
            cd /home/ubuntu/TaskTrek
            ./health-check.sh
          "
          
      - name: 📊 Deployment summary
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}"
          echo "📅 Deployed at: $(date)"
          echo "🔗 Commit: ${{ github.sha }}"
          
      - name: 📧 Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔗 Check the logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
